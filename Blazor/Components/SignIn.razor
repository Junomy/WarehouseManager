@using DAL.Entities
@using BLL.Interfaces
@using BLL.DTO
@using Blazor.Models
@using System.Net.Http
@using System.Net.Http.Json
@using Newtonsoft.Json
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject IAdminsServices serv

<div class="container">
    <div class="row justify-content-center align-items-center flex-column" style="height:100vh">
        <h3>Please, input your credentials @admin.UserName</h3>
        <div class="col-4">
            <div class="card">
                <div class="card-body">
                    <EditForm Model="login" OnSubmit="Login">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label>Email (admin@admin.com) @admin.Email</label>
                            <InputText class="form-control" @bind-Value="login.Login"></InputText>
                        </div>
                        <div class="form-group">
                            <label>Password (Admin123$)</label>
                            <InputText class="form-control" @bind-Value="login.Password"></InputText>
                        </div>
                        <input type="submit" class="btn btn-primary" value="Log in">
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    public AccountInfoModel account = new AccountInfoModel();
    public LoginModel login = new LoginModel();
    public Admin admin = new Admin();
    protected async override Task OnInitializedAsync()
    {
        //StateHasChanged();
    }
    public async Task Login(EditContext editContext)
    {
        admin = await serv.Login(new AdminLoginDTO { Email = login.Login, Password = login.Password });
        if (admin != null)
        {
            //var warehouse = Http.GetFromJsonAsync<Warehouse>($"https://localhost:44374/api/Warehouses/{admin.Id}");
            //await JSRuntime.InvokeVoidAsync("localStorage.setItem", "wId", warehouse.Id);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "aId", admin.Id);
            NavManager.NavigateTo("Home", forceLoad: true);
            StateHasChanged();
        }
        else
        {
            StateHasChanged();
        }
    }
}
@*Http.PostAsJsonAsync<AdminLoginDTO>
    (
    "https://localhost:44374/api/Admins/login",
    new AdminLoginDTO
    {
    Email = email,
    Password = password
    });*@
