// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Blazor.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 2 "C:\Users\Junomy\source\repos\WarehouseManagement\Blazor\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Junomy\source\repos\WarehouseManagement\Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Junomy\source\repos\WarehouseManagement\Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Junomy\source\repos\WarehouseManagement\Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Junomy\source\repos\WarehouseManagement\Blazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Junomy\source\repos\WarehouseManagement\Blazor\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Junomy\source\repos\WarehouseManagement\Blazor\_Imports.razor"
using Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Junomy\source\repos\WarehouseManagement\Blazor\_Imports.razor"
using Blazor.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\Junomy\source\repos\WarehouseManagement\Blazor\Components\ProviderView.razor"
using BLL.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Junomy\source\repos\WarehouseManagement\Blazor\Components\ProviderView.razor"
using DAL.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Junomy\source\repos\WarehouseManagement\Blazor\Components\ProviderView.razor"
using BLL.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Junomy\source\repos\WarehouseManagement\Blazor\Components\ProviderView.razor"
using Blazor.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Junomy\source\repos\WarehouseManagement\Blazor\Components\ProviderView.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Junomy\source\repos\WarehouseManagement\Blazor\Components\ProviderView.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Junomy\source\repos\WarehouseManagement\Blazor\Components\ProviderView.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
    public partial class ProviderView : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 163 "C:\Users\Junomy\source\repos\WarehouseManagement\Blazor\Components\ProviderView.razor"
       
    public int currentPage = 1;
    public int wId = 0;
    public int amount = 1;
    public string search = "";

    public ProductViewModel product = new ProductViewModel();
    public ProviderViewModel provider = new ProviderViewModel();
    public List<ProviderViewModel> table = new List<ProviderViewModel>();
    protected async override Task OnInitializedAsync()
    {
        string aId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "aId");
        Warehouse warehouse = await Http.GetFromJsonAsync<Warehouse>($"https://localhost:44374/api/Warehouses/{aId}");
        wId = (int)warehouse.Id;
        await UpdateTable();
        amount = await provider_services.ProdAmount(wId);
    }
    public async Task ShowProducts(int Id)
    {
        var model = table.Where(p => p.Id == Id).First();
        table.Where(p => p.Id == Id)
            .First()
            .ProductsShow = true;
        table.Where(p => p.Id == Id)
            .First()
            .ProdPage = 1;
        table.Where(p => p.Id == Id)
        .First()
        .Products = await Http.GetFromJsonAsync<List<Product>>($"https://localhost:44374/api/Providers/{Id}/products/{model.ProdPage}");
        StateHasChanged();
    }
    public async Task HideProducts(int Id)
    {
        table.Where(p => p.Id == Id)
            .First()
            .ProductsShow = false;

        table.Where(p => p.Id == Id)
            .First()
            .Products = new List<Product>();
        StateHasChanged();
    }
    private async Task ProductSubmit(EditContext editContext)
    {
        await product_services.AddProduct(new ProductDTO
        {
            Name = product.Name,
            Price = product.Price,
            ProviderId = product.ProviderId
        });
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }
    private async Task ProviderSubmit(EditContext editContext)
    {
        await provider_services.AddProvider(new ProviderDTO
        {
            Name = provider.Name,
            Address = provider.Address
        });
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }
    private async Task UpdateTable()
    {
        table = new List<ProviderViewModel>();
        var providers = await Http.GetFromJsonAsync<List<Provider>>($"https://localhost:44374/api/Providers/{currentPage}");
        foreach (var p in providers)
        {
            table.Add(new ProviderViewModel
            {
                Id = p.Id,
                Name = p.Name,
                Address = p.Address,
                ProductsShow = false,
                Products = new List<Product>(),
                ProdPage = 1,
                ProdAmount = await provider_services.ProdAmount(p.Id)
            });
        }
        StateHasChanged();
    }
    public async Task Next()
    {
        currentPage++;
        if (currentPage > amount + 1)
        {
            currentPage = amount + 1;
        }
        await UpdateTable();
    }
    public async Task Prev()
    {
        currentPage--;
        if (currentPage < 1)
        {
            currentPage = 1;
        }

        await UpdateTable();
    }
    public void Sort(char command)
    {
        switch (command)
        {
            case 'a':
                {
                    table = table.OrderBy(d => d.Name).ToList();
                    break;
                }
            case 'd':
                {
                    table = table.OrderByDescending(d => d.Name).ToList();
                    break;
                }
            case 'c':
                {
                    table = table.OrderBy(d => d.Id).ToList();
                    break;
                }
            default:
                {
                    table = table.OrderBy(d => d.Id).ToList();
                    break;
                }
        }
        StateHasChanged();
    }
    public async Task Search()
    {
        if (search == "")
        {
            await UpdateTable();
        }
        else
        {
            await UpdateTable();
            table = table.Where(s => s.Name.Contains(search)).ToList();
        }
        StateHasChanged();
    }
    public async Task PrevProd(int id)
    {
        int page = table.Where(p => p.Id == id).First().ProdPage;
        if (page - 1 < 1)
        {
            page = 1;
        }
        else
        {
            page--;
        }
        table.Where(p => p.Id == id).First().ProdPage = page;
        table.Where(p => p.Id == id).First().Products = await Http.GetFromJsonAsync<List<Product>>($"https://localhost:44374/api/Providers/{id}/products/{page}");
        StateHasChanged();
    }
    public async Task NextProd(int id)
    {
        int page = table.Where(p => p.Id == id).First().ProdPage;
        int prodamount = table.Where(p => p.Id == id).First().ProdAmount;
        if (page + 1 > prodamount + 1)
        {
            page = prodamount + 1;
        }
        else
        {
            page++;
        }
        table.Where(p => p.Id == id).First().ProdPage = page;
        table.Where(p => p.Id == id).First().Products = await Http.GetFromJsonAsync<List<Product>>($"https://localhost:44374/api/Providers/{id}/products/{page}");
        StateHasChanged();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IProductsServices product_services { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IProvidersServices provider_services { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager uriHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
